# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AccessToken {
  createdAt: DateTime!
  expiresIn: Float!
  id: Float!
  token: String!
  updatedAt: DateTime!
  userId: Float!
}

type Analysis {
  analyst: User!
  analystId: Float!
  createdAt: DateTime!
  id: Float!
  isApproved: Boolean!
  order: Order!
  orderId: Float!
  updatedAt: DateTime!
}

input BasicChangeItemInput {
  description: String = ""
  id: Float!
  imagePath: String = ""
  name: String!
  value: Float!
}

type Category {
  code: String!
  createdAt: DateTime!
  description: String
  id: Float!
  items: [Item!]!
  name: String!
  updatedAt: DateTime!
}

input CreateAnalysisInput {
  analystId: Float!
  isApproved: Boolean!
  orderId: Float!
}

input CreateCategoryInput {
  code: String = "NON_CODE"
  description: String!
  name: String!
}

input CreateDeliveryInput {
  itemId: Float!
  userId: Float!
}

input CreateInvoiceInput {
  supplier: CreateSupplierInput!
}

input CreateItemInput {
  categories: [CreateCategoryInput!]!
  description: String = ""
  imagePath: String = ""
  invoice: CreateInvoiceInput!
  name: String!
  storage: CreateStorageInput!
  value: Float!
}

input CreateOrderInput {
  itemId: Float!
  requesterId: Float!
}

input CreateStorageInput {
  userId: Float!
}

input CreateSupplierInput {
  cnpj: String!
  email: String = ""
  name: String!
  phone: String = ""
}

input CreateUserInput {
  departmentCode: String
  email: String!
  name: String!
  password: String!
  profileImagePath: String = ""
  roles: [Role!] = [Requester]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Delivery {
  attender: User!
  attenderId: Float!
  code: String!
  createdAt: DateTime!
  id: Float!
  item: Item
  status: Status
  updatedAt: DateTime!
}

type Department {
  code: String!
  createdAt: DateTime!
  description: String
  id: Float!
  name: String!
  updatedAt: DateTime!
}

type Invoice {
  code: String!
  createdAt: DateTime!
  id: Float!
  item: Item!
  supplier: Supplier!
  supplierId: Float!
  updatedAt: DateTime!
}

type Item {
  amount: Float!
  available: Boolean!
  categories: [Category!]
  category: Category!
  createdAt: DateTime!
  delivery: Delivery
  deliveryId: Float!
  description: String
  id: Float!
  imagePath: String
  invoice: Invoice!
  invoiceId: Float!
  name: String!
  order: Order
  orderId: Float!
  storage: Storage!
  storageId: Float!
  updatedAt: DateTime!
  value: Float!
}

type Mutation {
  createAnalysis(data: CreateAnalysisInput!): Analysis!
  createCategory(data: CreateCategoryInput!): Category!
  createItem(data: CreateItemInput!): Item!
  createUser(data: CreateUserInput!): User!
  deleteItem(id: Float!): Item!
  deleteUser(id: Float!): User!
  initItemOrder(data: CreateOrderInput!): Order!
  login(data: SignInInput!): SessionData!
  setItemDelivery(data: CreateDeliveryInput!): Item!
  updateItem(data: BasicChangeItemInput!): Item!
  updateUser(data: UpdateUserInput!): User!
}

type Order {
  analysis: Analysis
  code: String!
  createdAt: DateTime!
  id: Float!
  item: Item
  requester: User!
  requesterId: Float!
  updatedAt: DateTime!
}

type Query {
  analysis: [Analysis!]!
  categories: [Category!]!
  departments: [Department!]!
  getAnalysisById(id: Float!): Analysis!
  getCategory(code: String!): Category!
  getDpartmentByCode(code: String!): Department!
  getItemById(id: Float!): Item!
  getOrderByCode(code: String!): Order!
  getUserByAccessToken(token: String!): User!
  getUserById(id: Float!): User!
  itemAmount: Float!
  items: [Item!]!
  orders: [Order!]!
  userAmount: Float!
  users: [User!]!
}

type Record {
  auditor: User!
  auditorId: Float!
  code: String!
  createdAt: DateTime!
  id: Float!
  updatedAt: DateTime!
}

type RefreshToken {
  createdAt: DateTime!
  expiresIn: Float!
  id: Float!
  token: String!
  updatedAt: DateTime!
  userId: Float!
}

enum Role {
  Admin
  Analyst
  Auditor
  Manager
  Requester
  StoreKeeper
}

type SessionData {
  accessToken: AccessToken!
  refreshToken: RefreshToken!
  user: UserInSession!
}

input SignInInput {
  email: String!
  password: String!
}

enum Status {
  Concluded
  InProgress
  Separation
  Waiting
}

type Storage {
  code: String!
  createdAt: DateTime!
  id: Float!
  item: Item!
  storekeeper: User!
  storekeeperId: Float!
  updatedAt: DateTime!
}

type Supplier {
  cnpj: String!
  createdAt: DateTime!
  email: String
  id: Float!
  invoices: [Invoice!]!
  name: String!
  phone: String
  updatedAt: DateTime!
}

type Token {
  createdAt: DateTime!
  expiresIn: Float!
  id: Float!
  token: String!
  updatedAt: DateTime!
  userId: Float!
}

input UpdateUserInput {
  email: String
  id: Float!
  name: String
  password: String
  profileImagePath: String
  roles: [Role!]
}

type User {
  accessToken: Token!
  analysis: [Analysis!]
  createdAt: DateTime!
  delivery: [Delivery!]
  department: [Department!]
  email: String!
  id: Float!
  isActive: Boolean
  isDeleted: Boolean
  name: String!
  orders: [Order!]
  password: String!
  profileImagePath: String
  record: [Record!]!
  records: [Record!]
  refreshToken: Token!
  requestedOrder: [Order!]!
  roles: [Role!]
  storage: [Storage!]
  updatedAt: DateTime!
}

type UserInSession {
  department: [Department!]!
  email: String!
  id: Float!
  name: String!
  password: String!
  profileImagePath: String!
  roles: [Role!]!
}
