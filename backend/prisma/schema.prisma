generator client {
  provider = "prisma-client-js"
}

// generator typegraphql {
//   provider = "typegraphql-prisma"
//   output   = "./generated/type-graphql"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Record{
  id Int @id @default(autoincrement())
  code String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditor User @relation(fields: [auditorId], references: [id])
  auditorId Int
}

model Supplier{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @default("")
  cnpj String @unique
  email String?
  phone String?

  invoices Invoice[] @relation("included")
}

model Department{
  id Int @id @default(autoincrement())
  code String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  description String @default("")

  users User[]

}

model Category{
  id Int @id @default(autoincrement())
  code String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  description String @default("")

  items Item[]
}

model Analysis{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isApproved Boolean

  analyst User @relation("analysis", fields: [analystId], references: [id])
  analystId Int

  order Order @relation(fields: [orderId], references: [id])
  orderId Int @unique
}

model Order{
  id Int @id @default(autoincrement())
  code String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requester User @relation("orders", fields: [requesterId], references: [id], onDelete: Cascade)
  requesterId Int

  analysis Analysis?

  item Item?
}

model Delivery{
  id Int @id @default(autoincrement())
  code String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status Status @default(Waiting)

  attender User @relation(fields: [attenderId],references: [id])
  attenderId Int

  item Item?
}

model Invoice{
  id Int @id @default(autoincrement())
  code String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  item Item?

  supplier Supplier @relation("included", fields: [supplierId], references: [id])
  supplierId Int
}

model Storage{
  id Int @id @default(autoincrement())
  code String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storekeeper User @relation(fields: [storekeeperId], references: [id])
  storekeeperId Int

  item Item?

}

model Item {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  imagePath String @default("")
  description String @default("")
  value Float
  available Boolean @default(true)
  amount Int @default(1)

  order Order? @relation(fields: [orderId], references: [id])
  orderId Int? @unique

  storage Storage @relation(fields: [storageId], references: [id])
  storageId Int @unique

  delivery Delivery? @relation(fields: [deliveryId], references: [id])
  deliveryId Int? @unique

  categories Category[]

  invoice Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId Int @unique
}

model AccessToken{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token String @unique
  expiresIn Int @default(3600) //1h
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int @unique
}

model RefreshToken{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token String @unique
  expiresIn Int @default(36000) //10h
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int @unique
}

model User {
  id Int @id @default(autoincrement())
  isActive Boolean @default(true)
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileImagePath String @default("")
  name String
  email String @unique
  password String
  roles Role[]

  orders Order[] @relation("orders")
  analysis Analysis[] @relation("analysis")
  storage Storage[]
  delivery Delivery[]
  department Department[]
  records Record[]
  accessToken AccessToken?
  refreshToken RefreshToken?
}

enum Role{
  Admin
  Analyst
  Auditor
  Requester
  StoreKeeper
  Manager
}

enum Status{
  Waiting
  Separation
  InProgress
  Concluded
}